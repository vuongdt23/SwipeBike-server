// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = "mysql://root:password@localhost:3306/swipebike?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  UserId         Int     @id @default(autoincrement())
  UserFullName   String?
  UserEmail      String
  UserAccount    String
  UserPhone      String?
  UserGender     String?
  UserDoB        String?
  UserProfilePic String?
  IsSetUp        Boolean @default(false)

  UserUniversity        University?        @relation(fields: [UniversityID], references: [UniversityId])
  CandidateTrips        CandidateTrip[]
  NotificationsReceived UserNotification[] @relation("NotificationCreated")
  NotificationsSent     UserNotification[] @relation("NotificationReceived")

  TripRequestsSent    TripRequest[] @relation("RequestCreator")
  TripRequestsRecived TripRequest[] @relation("RequestRecieved")
  TripsAsDriver       Trip[]        @relation("TripDriver")
  TripsAsPassenger    Trip[]        @relation("TripPassenger")
  Messages            UserMessage[]

  UniversityID      Int?
  ContactsAsOwner   UserContact[] @relation("ContactOwner")
  ContactssAsTarget UserContact[] @relation("ContactTarget")
  UserRating        UserRating[]
  @@map("users")
}

model University {
  UniversityId          Int     @id @default(autoincrement())
  UniversityCode        String?
  UniversityFullName    String?
  UniversityEmailSuffix String?
  Users                 User[]

  @@map("universities")
}

model CandidateTrip {

  CandidateTripId            Int      @id @default(autoincrement())
  CandidateTripCreator       User     @relation(fields: [CreatorId], references: [UserId])
  CreatorId                  Int
  CandidateTripFromLat       Float?
  CandidateTripFromLong      Float?
  CandidateTripFromAddress   String?
  CandidateTripToLat         Float?
  CandidateTripToLong        Float?
  CandidateTripToAddress     String?
  CandidateTripMessage       String?
  CandidateTripBike          Boolean?
  CandidateTripDateTime      String?
  CandidateTripGenderDesired String?

  CandidateTripStatus TripStatus? @relation(fields: [TripStatusId], references: [TripStatusId])


  TripStatusId Int?
  @@map("candidatetrips")
}

model TripStatus {
  TripStatusId          Int             @id @default(autoincrement())
  TripStatusName        String
  TripStatusDescription String
  CandidateTrips        CandidateTrip[]
  TripRequests          TripRequest[]
  Trips                 Trip[]

  @@map("tripstatus")
}

model TripRequest {
  RequestId         Int     @id @default(autoincrement())
  RequestCreator    User?   @relation("RequestCreator", fields: [RequestCreatorId], references: [UserId])
  RequestTarget     User?   @relation("RequestRecieved", fields: [RequestTargetId], references: [UserId])
  DriverFromLat     Float?
  DriverFromLong    Float?
  DriverFromAddress String?
  DriverToAddress   String?
  DriverToLat       Float?
  DriverToLong      Float?



  PassengerFromLat     Float?
  PassengerFromLong    Float?
  PassengerFromAddress String?
  PassengerToAddress   String?
  PassengerToLat       Float?
  PassengerToLong      Float?

  CandidateTripFrom Int?
  CandidateTripSent Int?
  RequestCreateTime String?
  TripTime          String?

  RequestStatus TripStatus? @relation(fields: [TripStatusId], references: [TripStatusId])

  CreatorBike      Boolean?
  RequestCreatorId Int?
  TripStatusId     Int?
  RequestTargetId  Int?
  @@map("triprequests")
}

model Trip {
  TripId Int @id @default(autoincrement())


  TripDriver      User?    @relation("TripDriver", fields: [TripDriverId], references: [UserId])
  TripPassenger   User?    @relation("TripPassenger", fields: [TripPassengerId], references: [UserId])
  CreatorBike     Boolean?
  TripDriverId    Int?
  TripPassengerId Int?


  DriverFromLat        Float?
  DriverFromLong       Float?
  DriverFromAddress    String?
  DriverToAddress      String?
  DriverToLat          Float?
  DriverToLong         Float?
  TripStatus           TripStatus? @relation(fields: [TripStatusID], references: [TripStatusId])
  PassengerFromLat     Float?
  PassengerFromLong    Float?
  PassengerFromAddress String?
  PassengerToAddress   String?
  PassengerToLat       Float?
  PassengerToLong      Float?

  TripStatusID    Int?
  TripRatingId    Int         @unique
  FromRequest     Int?
  TripCreatedTime String?
  TripStartTime   String?
  UserRating      UserRating? @relation(fields: [TripRatingId], references: [RatingId])
  @@map("trips")
}

model UserNotification {
  NotificationId Int @id @default(autoincrement())

  UserNotificationTitle   String?
  UserNotificationContent String?
  NotificationTarget      User?             @relation("NotificationReceived", fields: [NotificationTargetId], references: [UserId])
  NotificationCreator     User?             @relation("NotificationCreated", fields: [NotificationCreatorId], references: [UserId])
  CreatorImage            String?
  NotificationCreateTime  String?
  NotificationCreatorId   Int?
  NotificationTargetId    Int?
  NotificationRead        Boolean?
  NotificationType        NotificationType? @relation(fields: [NotificationTypeId], references: [NotificationTypeId])
  NotificationTypeId      Int?
  @@map("usernotifications")
}

model UserContact {
  UserContactId Int @id @default(autoincrement())

  ContactOwner    User          @relation("ContactOwner", fields: [ContactOwnerId], references: [UserId])
  ContactTarget   User          @relation("ContactTarget", fields: [ContactTargetId], references: [UserId])
  ContactOwnerId  Int
  ContactTargetId Int
  Messages        UserMessage[]
}

model UserMessage {
  UserMessageId Int         @id @default(autoincrement())
  MessageAuthor User        @relation(fields: [AuthorId], references: [UserId])
  MessageConvo  UserContact @relation(fields: [ConversationID], references: [UserContactId])

  AuthorId       Int
  ConversationID Int
}

model NotificationType {
  NotificationTypeId          Int                @id @default(autoincrement())
  NotificationTypeName        String
  NotificationTypeDescription String
  Notifications               UserNotification[]

}

model UserRating {
  RatingId    Int      @id @default(autoincrement())
  UserId      Int?
  RatingUser  User?    @relation(fields: [UserId], references: [UserId])
  RatingLiked Boolean?
  Trip        Trip?
}
